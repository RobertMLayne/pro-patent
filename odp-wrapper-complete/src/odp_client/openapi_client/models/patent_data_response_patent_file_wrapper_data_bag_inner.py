# coding: utf-8

"""
    Open Data Portal (ODP) API

    The Open Data Portal (ODP) API allows you to extract USPTO data at no cost - with several ways to do it. To learn about the ODP API Rate Limits, please visit to the <a href=\"https://data.uspto.gov/apis/api-rate-limits\" target=\"_blank\">API Rate Limits page</a>. <br><br> <b>Before proceeding</b>, you must have an ODP API key in order to access these Swagger UI resources. Once you have obtained an API key, you can pass the API key into a REST API call in the x-api-key header of the request. For more details and steps to generate an API key visit to the <a href=\"https://data.uspto.gov/apis/getting-started\" target=\"_blank\">Getting Started page</a>.<br><br>For example, the request to access patent data for an application might look like as below.<br><br><code>curl -X \"GET\" \"https://api.uspto.gov/api/v1/patent/applications/14412875\" -H \"X-API-KEY:YOUR_API_KEY\"</code><br><br></br><code>curl -X \"POST\" \"https://api.uspto.gov/api/v1/patent/applications/search\" -H \"X-API-KEY:YOUR_API_KEY\" -d \"{\\\\\"q\\\\\":\\\\\"applicationMetaData.applicationTypeLabelName:Utility\\\\\"}\"</br></code>

    The version of the OpenAPI document: 1.0.0
    Contact: data@uspto.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_meta_data import ApplicationMetaData
from openapi_client.models.assignment import Assignment
from openapi_client.models.child_continuity_data import ChildContinuityData
from openapi_client.models.event_data import EventData
from openapi_client.models.foreign_priority import ForeignPriority
from openapi_client.models.grant_file_meta_data import GrantFileMetaData
from openapi_client.models.parent_continuity_data import ParentContinuityData
from openapi_client.models.patent_data_response_patent_file_wrapper_data_bag_inner_correspondence_address_bag_inner import PatentDataResponsePatentFileWrapperDataBagInnerCorrespondenceAddressBagInner
from openapi_client.models.patent_term_adjustment import PatentTermAdjustment
from openapi_client.models.pg_pub_file_meta_data import PGPubFileMetaData
from openapi_client.models.record_attorney import RecordAttorney
from typing import Optional, Set
from typing_extensions import Self

class PatentDataResponsePatentFileWrapperDataBagInner(BaseModel):
    """
    PatentDataResponsePatentFileWrapperDataBagInner
    """ # noqa: E501
    application_number_text: Optional[StrictStr] = Field(default=None, description="Free format of application number", alias="applicationNumberText")
    application_meta_data: Optional[ApplicationMetaData] = Field(default=None, alias="applicationMetaData")
    correspondence_address_bag: Optional[List[PatentDataResponsePatentFileWrapperDataBagInnerCorrespondenceAddressBagInner]] = Field(default=None, description="Collection of correspondences", alias="correspondenceAddressBag")
    assignment_bag: Optional[List[Assignment]] = Field(default=None, alias="assignmentBag")
    record_attorney: Optional[RecordAttorney] = Field(default=None, alias="recordAttorney")
    foreign_priority_bag: Optional[List[ForeignPriority]] = Field(default=None, alias="foreignPriorityBag")
    parent_continuity_bag: Optional[List[ParentContinuityData]] = Field(default=None, alias="parentContinuityBag")
    child_continuity_bag: Optional[List[ChildContinuityData]] = Field(default=None, alias="childContinuityBag")
    patent_term_adjustment_data: Optional[PatentTermAdjustment] = Field(default=None, alias="patentTermAdjustmentData")
    event_data_bag: Optional[List[EventData]] = Field(default=None, alias="eventDataBag")
    pgpub_document_meta_data: Optional[PGPubFileMetaData] = Field(default=None, alias="pgpubDocumentMetaData")
    grant_document_meta_data: Optional[GrantFileMetaData] = Field(default=None, alias="grantDocumentMetaData")
    last_ingestion_date_time: Optional[StrictStr] = Field(default=None, alias="lastIngestionDateTime")
    __properties: ClassVar[List[str]] = ["applicationNumberText", "applicationMetaData", "correspondenceAddressBag", "assignmentBag", "recordAttorney", "foreignPriorityBag", "parentContinuityBag", "childContinuityBag", "patentTermAdjustmentData", "eventDataBag", "pgpubDocumentMetaData", "grantDocumentMetaData", "lastIngestionDateTime"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatentDataResponsePatentFileWrapperDataBagInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of application_meta_data
        if self.application_meta_data:
            _dict['applicationMetaData'] = self.application_meta_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in correspondence_address_bag (list)
        _items = []
        if self.correspondence_address_bag:
            for _item_correspondence_address_bag in self.correspondence_address_bag:
                if _item_correspondence_address_bag:
                    _items.append(_item_correspondence_address_bag.to_dict())
            _dict['correspondenceAddressBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in assignment_bag (list)
        _items = []
        if self.assignment_bag:
            for _item_assignment_bag in self.assignment_bag:
                if _item_assignment_bag:
                    _items.append(_item_assignment_bag.to_dict())
            _dict['assignmentBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of record_attorney
        if self.record_attorney:
            _dict['recordAttorney'] = self.record_attorney.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in foreign_priority_bag (list)
        _items = []
        if self.foreign_priority_bag:
            for _item_foreign_priority_bag in self.foreign_priority_bag:
                if _item_foreign_priority_bag:
                    _items.append(_item_foreign_priority_bag.to_dict())
            _dict['foreignPriorityBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parent_continuity_bag (list)
        _items = []
        if self.parent_continuity_bag:
            for _item_parent_continuity_bag in self.parent_continuity_bag:
                if _item_parent_continuity_bag:
                    _items.append(_item_parent_continuity_bag.to_dict())
            _dict['parentContinuityBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in child_continuity_bag (list)
        _items = []
        if self.child_continuity_bag:
            for _item_child_continuity_bag in self.child_continuity_bag:
                if _item_child_continuity_bag:
                    _items.append(_item_child_continuity_bag.to_dict())
            _dict['childContinuityBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of patent_term_adjustment_data
        if self.patent_term_adjustment_data:
            _dict['patentTermAdjustmentData'] = self.patent_term_adjustment_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in event_data_bag (list)
        _items = []
        if self.event_data_bag:
            for _item_event_data_bag in self.event_data_bag:
                if _item_event_data_bag:
                    _items.append(_item_event_data_bag.to_dict())
            _dict['eventDataBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of pgpub_document_meta_data
        if self.pgpub_document_meta_data:
            _dict['pgpubDocumentMetaData'] = self.pgpub_document_meta_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of grant_document_meta_data
        if self.grant_document_meta_data:
            _dict['grantDocumentMetaData'] = self.grant_document_meta_data.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatentDataResponsePatentFileWrapperDataBagInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "applicationNumberText": obj.get("applicationNumberText"),
            "applicationMetaData": ApplicationMetaData.from_dict(obj["applicationMetaData"]) if obj.get("applicationMetaData") is not None else None,
            "correspondenceAddressBag": [PatentDataResponsePatentFileWrapperDataBagInnerCorrespondenceAddressBagInner.from_dict(_item) for _item in obj["correspondenceAddressBag"]] if obj.get("correspondenceAddressBag") is not None else None,
            "assignmentBag": [Assignment.from_dict(_item) for _item in obj["assignmentBag"]] if obj.get("assignmentBag") is not None else None,
            "recordAttorney": RecordAttorney.from_dict(obj["recordAttorney"]) if obj.get("recordAttorney") is not None else None,
            "foreignPriorityBag": [ForeignPriority.from_dict(_item) for _item in obj["foreignPriorityBag"]] if obj.get("foreignPriorityBag") is not None else None,
            "parentContinuityBag": [ParentContinuityData.from_dict(_item) for _item in obj["parentContinuityBag"]] if obj.get("parentContinuityBag") is not None else None,
            "childContinuityBag": [ChildContinuityData.from_dict(_item) for _item in obj["childContinuityBag"]] if obj.get("childContinuityBag") is not None else None,
            "patentTermAdjustmentData": PatentTermAdjustment.from_dict(obj["patentTermAdjustmentData"]) if obj.get("patentTermAdjustmentData") is not None else None,
            "eventDataBag": [EventData.from_dict(_item) for _item in obj["eventDataBag"]] if obj.get("eventDataBag") is not None else None,
            "pgpubDocumentMetaData": PGPubFileMetaData.from_dict(obj["pgpubDocumentMetaData"]) if obj.get("pgpubDocumentMetaData") is not None else None,
            "grantDocumentMetaData": GrantFileMetaData.from_dict(obj["grantDocumentMetaData"]) if obj.get("grantDocumentMetaData") is not None else None,
            "lastIngestionDateTime": obj.get("lastIngestionDateTime")
        })
        return _obj


