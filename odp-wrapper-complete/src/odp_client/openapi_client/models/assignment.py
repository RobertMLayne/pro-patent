# coding: utf-8

"""
    Open Data Portal (ODP) API

    The Open Data Portal (ODP) API allows you to extract USPTO data at no cost - with several ways to do it. To learn about the ODP API Rate Limits, please visit to the <a href=\"https://data.uspto.gov/apis/api-rate-limits\" target=\"_blank\">API Rate Limits page</a>. <br><br> <b>Before proceeding</b>, you must have an ODP API key in order to access these Swagger UI resources. Once you have obtained an API key, you can pass the API key into a REST API call in the x-api-key header of the request. For more details and steps to generate an API key visit to the <a href=\"https://data.uspto.gov/apis/getting-started\" target=\"_blank\">Getting Started page</a>.<br><br>For example, the request to access patent data for an application might look like as below.<br><br><code>curl -X \"GET\" \"https://api.uspto.gov/api/v1/patent/applications/14412875\" -H \"X-API-KEY:YOUR_API_KEY\"</code><br><br></br><code>curl -X \"POST\" \"https://api.uspto.gov/api/v1/patent/applications/search\" -H \"X-API-KEY:YOUR_API_KEY\" -d \"{\\\\\"q\\\\\":\\\\\"applicationMetaData.applicationTypeLabelName:Utility\\\\\"}\"</br></code>

    The version of the OpenAPI document: 1.0.0
    Contact: data@uspto.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.assignment_assignee_bag_inner import AssignmentAssigneeBagInner
from openapi_client.models.assignment_assignor_bag_inner import AssignmentAssignorBagInner
from openapi_client.models.assignment_correspondence_address_bag_inner import AssignmentCorrespondenceAddressBagInner
from typing import Optional, Set
from typing_extensions import Self

class Assignment(BaseModel):
    """
    The collection of national assignments related to a patent
    """ # noqa: E501
    reel_number: Optional[StrictStr] = Field(default=None, description="1-6 digit number identifies the reel number to be used to locate the assignment on microfilm.", alias="reelNumber")
    frame_number: Optional[StrictStr] = Field(default=None, description="1-4 digit number that identifies the frame number to be used to locate the first image(page) of the assignment on microfilm.", alias="frameNumber")
    reel_and_frame_number: Optional[StrictStr] = Field(default=None, alias="reelAndFrameNumber")
    page_total_quantity: Optional[StrictInt] = Field(default=None, alias="pageTotalQuantity")
    assignment_document_location_uri: Optional[StrictStr] = Field(default=None, alias="assignmentDocumentLocationURI")
    assignment_received_date: Optional[StrictStr] = Field(default=None, alias="assignmentReceivedDate")
    assignment_recorded_date: Optional[StrictStr] = Field(default=None, alias="assignmentRecordedDate")
    assignment_mailed_date: Optional[StrictStr] = Field(default=None, description="The date an assignment request was mailed to the office or received by the office", alias="assignmentMailedDate")
    conveyance_text: Optional[StrictStr] = Field(default=None, description="A description of the nature of the interest conveyed or transaction to be recorded in an assignment. Examples of the types of descriptions `include:` assignment, security agreement, merger, change of name, license, foreclosure, lien,", alias="conveyanceText")
    assignor_bag: Optional[List[AssignmentAssignorBagInner]] = Field(default=None, alias="assignorBag")
    assignee_bag: Optional[List[AssignmentAssigneeBagInner]] = Field(default=None, alias="assigneeBag")
    correspondence_address_bag: Optional[List[AssignmentCorrespondenceAddressBagInner]] = Field(default=None, alias="correspondenceAddressBag")
    __properties: ClassVar[List[str]] = ["reelNumber", "frameNumber", "reelAndFrameNumber", "pageTotalQuantity", "assignmentDocumentLocationURI", "assignmentReceivedDate", "assignmentRecordedDate", "assignmentMailedDate", "conveyanceText", "assignorBag", "assigneeBag", "correspondenceAddressBag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Assignment from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in assignor_bag (list)
        _items = []
        if self.assignor_bag:
            for _item_assignor_bag in self.assignor_bag:
                if _item_assignor_bag:
                    _items.append(_item_assignor_bag.to_dict())
            _dict['assignorBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in assignee_bag (list)
        _items = []
        if self.assignee_bag:
            for _item_assignee_bag in self.assignee_bag:
                if _item_assignee_bag:
                    _items.append(_item_assignee_bag.to_dict())
            _dict['assigneeBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in correspondence_address_bag (list)
        _items = []
        if self.correspondence_address_bag:
            for _item_correspondence_address_bag in self.correspondence_address_bag:
                if _item_correspondence_address_bag:
                    _items.append(_item_correspondence_address_bag.to_dict())
            _dict['correspondenceAddressBag'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Assignment from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "reelNumber": obj.get("reelNumber"),
            "frameNumber": obj.get("frameNumber"),
            "reelAndFrameNumber": obj.get("reelAndFrameNumber"),
            "pageTotalQuantity": obj.get("pageTotalQuantity"),
            "assignmentDocumentLocationURI": obj.get("assignmentDocumentLocationURI"),
            "assignmentReceivedDate": obj.get("assignmentReceivedDate"),
            "assignmentRecordedDate": obj.get("assignmentRecordedDate"),
            "assignmentMailedDate": obj.get("assignmentMailedDate"),
            "conveyanceText": obj.get("conveyanceText"),
            "assignorBag": [AssignmentAssignorBagInner.from_dict(_item) for _item in obj["assignorBag"]] if obj.get("assignorBag") is not None else None,
            "assigneeBag": [AssignmentAssigneeBagInner.from_dict(_item) for _item in obj["assigneeBag"]] if obj.get("assigneeBag") is not None else None,
            "correspondenceAddressBag": [AssignmentCorrespondenceAddressBagInner.from_dict(_item) for _item in obj["correspondenceAddressBag"]] if obj.get("correspondenceAddressBag") is not None else None
        })
        return _obj


