# coding: utf-8

"""
    Open Data Portal (ODP) API

    The Open Data Portal (ODP) API allows you to extract USPTO data at no cost - with several ways to do it. To learn about the ODP API Rate Limits, please visit to the <a href=\"https://data.uspto.gov/apis/api-rate-limits\" target=\"_blank\">API Rate Limits page</a>. <br><br> <b>Before proceeding</b>, you must have an ODP API key in order to access these Swagger UI resources. Once you have obtained an API key, you can pass the API key into a REST API call in the x-api-key header of the request. For more details and steps to generate an API key visit to the <a href=\"https://data.uspto.gov/apis/getting-started\" target=\"_blank\">Getting Started page</a>.<br><br>For example, the request to access patent data for an application might look like as below.<br><br><code>curl -X \"GET\" \"https://api.uspto.gov/api/v1/patent/applications/14412875\" -H \"X-API-KEY:YOUR_API_KEY\"</code><br><br></br><code>curl -X \"POST\" \"https://api.uspto.gov/api/v1/patent/applications/search\" -H \"X-API-KEY:YOUR_API_KEY\" -d \"{\\\\\"q\\\\\":\\\\\"applicationMetaData.applicationTypeLabelName:Utility\\\\\"}\"</br></code>

    The version of the OpenAPI document: 1.0.0
    Contact: data@uspto.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.petition_decision_facet_entity import PetitionDecisionFacetEntity
from typing import Optional, Set
from typing_extensions import Self

class PetitionDecisionFacet(BaseModel):
    """
    PetitionDecisionFacet
    """ # noqa: E501
    technology_center: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="technologyCenter")
    final_deciding_office_name: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="finalDecidingOfficeName")
    first_inventor_to_file_indicator: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="firstInventorToFileIndicator")
    decision_petition_type_code: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="decisionPetitionTypeCode")
    decision_type_code_description_text: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="decisionTypeCodeDescriptionText")
    prosecution_status_code_description_text: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="prosecutionStatusCodeDescriptionText")
    petition_issue_considered_text_bag: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="petitionIssueConsideredTextBag")
    statute_bag: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="statuteBag")
    rule_bag: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="ruleBag")
    action_taken_by_court_name: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="actionTakenByCourtName")
    court_action_indicator: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="courtActionIndicator")
    business_entity_status_category: Optional[List[PetitionDecisionFacetEntity]] = Field(default=None, alias="businessEntityStatusCategory")
    __properties: ClassVar[List[str]] = ["technologyCenter", "finalDecidingOfficeName", "firstInventorToFileIndicator", "decisionPetitionTypeCode", "decisionTypeCodeDescriptionText", "prosecutionStatusCodeDescriptionText", "petitionIssueConsideredTextBag", "statuteBag", "ruleBag", "actionTakenByCourtName", "courtActionIndicator", "businessEntityStatusCategory"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PetitionDecisionFacet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in technology_center (list)
        _items = []
        if self.technology_center:
            for _item_technology_center in self.technology_center:
                if _item_technology_center:
                    _items.append(_item_technology_center.to_dict())
            _dict['technologyCenter'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in final_deciding_office_name (list)
        _items = []
        if self.final_deciding_office_name:
            for _item_final_deciding_office_name in self.final_deciding_office_name:
                if _item_final_deciding_office_name:
                    _items.append(_item_final_deciding_office_name.to_dict())
            _dict['finalDecidingOfficeName'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in first_inventor_to_file_indicator (list)
        _items = []
        if self.first_inventor_to_file_indicator:
            for _item_first_inventor_to_file_indicator in self.first_inventor_to_file_indicator:
                if _item_first_inventor_to_file_indicator:
                    _items.append(_item_first_inventor_to_file_indicator.to_dict())
            _dict['firstInventorToFileIndicator'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in decision_petition_type_code (list)
        _items = []
        if self.decision_petition_type_code:
            for _item_decision_petition_type_code in self.decision_petition_type_code:
                if _item_decision_petition_type_code:
                    _items.append(_item_decision_petition_type_code.to_dict())
            _dict['decisionPetitionTypeCode'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in decision_type_code_description_text (list)
        _items = []
        if self.decision_type_code_description_text:
            for _item_decision_type_code_description_text in self.decision_type_code_description_text:
                if _item_decision_type_code_description_text:
                    _items.append(_item_decision_type_code_description_text.to_dict())
            _dict['decisionTypeCodeDescriptionText'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in prosecution_status_code_description_text (list)
        _items = []
        if self.prosecution_status_code_description_text:
            for _item_prosecution_status_code_description_text in self.prosecution_status_code_description_text:
                if _item_prosecution_status_code_description_text:
                    _items.append(_item_prosecution_status_code_description_text.to_dict())
            _dict['prosecutionStatusCodeDescriptionText'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in petition_issue_considered_text_bag (list)
        _items = []
        if self.petition_issue_considered_text_bag:
            for _item_petition_issue_considered_text_bag in self.petition_issue_considered_text_bag:
                if _item_petition_issue_considered_text_bag:
                    _items.append(_item_petition_issue_considered_text_bag.to_dict())
            _dict['petitionIssueConsideredTextBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in statute_bag (list)
        _items = []
        if self.statute_bag:
            for _item_statute_bag in self.statute_bag:
                if _item_statute_bag:
                    _items.append(_item_statute_bag.to_dict())
            _dict['statuteBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rule_bag (list)
        _items = []
        if self.rule_bag:
            for _item_rule_bag in self.rule_bag:
                if _item_rule_bag:
                    _items.append(_item_rule_bag.to_dict())
            _dict['ruleBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in action_taken_by_court_name (list)
        _items = []
        if self.action_taken_by_court_name:
            for _item_action_taken_by_court_name in self.action_taken_by_court_name:
                if _item_action_taken_by_court_name:
                    _items.append(_item_action_taken_by_court_name.to_dict())
            _dict['actionTakenByCourtName'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in court_action_indicator (list)
        _items = []
        if self.court_action_indicator:
            for _item_court_action_indicator in self.court_action_indicator:
                if _item_court_action_indicator:
                    _items.append(_item_court_action_indicator.to_dict())
            _dict['courtActionIndicator'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in business_entity_status_category (list)
        _items = []
        if self.business_entity_status_category:
            for _item_business_entity_status_category in self.business_entity_status_category:
                if _item_business_entity_status_category:
                    _items.append(_item_business_entity_status_category.to_dict())
            _dict['businessEntityStatusCategory'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PetitionDecisionFacet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "technologyCenter": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["technologyCenter"]] if obj.get("technologyCenter") is not None else None,
            "finalDecidingOfficeName": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["finalDecidingOfficeName"]] if obj.get("finalDecidingOfficeName") is not None else None,
            "firstInventorToFileIndicator": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["firstInventorToFileIndicator"]] if obj.get("firstInventorToFileIndicator") is not None else None,
            "decisionPetitionTypeCode": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["decisionPetitionTypeCode"]] if obj.get("decisionPetitionTypeCode") is not None else None,
            "decisionTypeCodeDescriptionText": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["decisionTypeCodeDescriptionText"]] if obj.get("decisionTypeCodeDescriptionText") is not None else None,
            "prosecutionStatusCodeDescriptionText": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["prosecutionStatusCodeDescriptionText"]] if obj.get("prosecutionStatusCodeDescriptionText") is not None else None,
            "petitionIssueConsideredTextBag": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["petitionIssueConsideredTextBag"]] if obj.get("petitionIssueConsideredTextBag") is not None else None,
            "statuteBag": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["statuteBag"]] if obj.get("statuteBag") is not None else None,
            "ruleBag": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["ruleBag"]] if obj.get("ruleBag") is not None else None,
            "actionTakenByCourtName": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["actionTakenByCourtName"]] if obj.get("actionTakenByCourtName") is not None else None,
            "courtActionIndicator": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["courtActionIndicator"]] if obj.get("courtActionIndicator") is not None else None,
            "businessEntityStatusCategory": [PetitionDecisionFacetEntity.from_dict(_item) for _item in obj["businessEntityStatusCategory"]] if obj.get("businessEntityStatusCategory") is not None else None
        })
        return _obj


