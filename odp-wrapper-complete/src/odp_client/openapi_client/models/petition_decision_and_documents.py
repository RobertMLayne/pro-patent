# coding: utf-8

"""
    Open Data Portal (ODP) API

    The Open Data Portal (ODP) API allows you to extract USPTO data at no cost - with several ways to do it. To learn about the ODP API Rate Limits, please visit to the <a href=\"https://data.uspto.gov/apis/api-rate-limits\" target=\"_blank\">API Rate Limits page</a>. <br><br> <b>Before proceeding</b>, you must have an ODP API key in order to access these Swagger UI resources. Once you have obtained an API key, you can pass the API key into a REST API call in the x-api-key header of the request. For more details and steps to generate an API key visit to the <a href=\"https://data.uspto.gov/apis/getting-started\" target=\"_blank\">Getting Started page</a>.<br><br>For example, the request to access patent data for an application might look like as below.<br><br><code>curl -X \"GET\" \"https://api.uspto.gov/api/v1/patent/applications/14412875\" -H \"X-API-KEY:YOUR_API_KEY\"</code><br><br></br><code>curl -X \"POST\" \"https://api.uspto.gov/api/v1/patent/applications/search\" -H \"X-API-KEY:YOUR_API_KEY\" -d \"{\\\\\"q\\\\\":\\\\\"applicationMetaData.applicationTypeLabelName:Utility\\\\\"}\"</br></code>

    The version of the OpenAPI document: 1.0.0
    Contact: data@uspto.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.petition_decision_document import PetitionDecisionDocument
from typing import Optional, Set
from typing_extensions import Self

class PetitionDecisionAndDocuments(BaseModel):
    """
    PetitionDecisionAndDocuments
    """ # noqa: E501
    document_bag: Optional[List[PetitionDecisionDocument]] = Field(default=None, alias="documentBag")
    petition_decision_record_identifier: Optional[StrictStr] = Field(default=None, alias="petitionDecisionRecordIdentifier")
    application_number_text: Optional[StrictStr] = Field(default=None, alias="applicationNumberText")
    business_entity_status_category: Optional[StrictStr] = Field(default=None, alias="businessEntityStatusCategory")
    customer_number: Optional[StrictInt] = Field(default=None, alias="customerNumber")
    decision_date: Optional[StrictStr] = Field(default=None, alias="decisionDate")
    decision_petition_type_code: Optional[StrictInt] = Field(default=None, alias="decisionPetitionTypeCode")
    decision_type_code: Optional[StrictStr] = Field(default=None, alias="decisionTypeCode")
    decision_petition_type_code_description_text: Optional[StrictStr] = Field(default=None, alias="decisionPetitionTypeCodeDescriptionText")
    final_deciding_office_name: Optional[StrictStr] = Field(default=None, alias="finalDecidingOfficeName")
    first_applicant_name: Optional[StrictStr] = Field(default=None, alias="firstApplicantName")
    first_inventor_to_file_indicator: Optional[StrictBool] = Field(default=None, alias="firstInventorToFileIndicator")
    group_art_unit_number: Optional[StrictStr] = Field(default=None, alias="groupArtUnitNumber")
    technology_center: Optional[StrictStr] = Field(default=None, alias="technologyCenter")
    invention_title: Optional[StrictStr] = Field(default=None, alias="inventionTitle")
    inventor_bag: Optional[List[StrictStr]] = Field(default=None, alias="inventorBag")
    action_taken_by_court_name: Optional[StrictStr] = Field(default=None, alias="actionTakenByCourtName")
    court_action_indicator: Optional[StrictBool] = Field(default=None, alias="courtActionIndicator")
    last_ingestion_date_time: Optional[StrictStr] = Field(default=None, alias="lastIngestionDateTime")
    patent_number: Optional[StrictStr] = Field(default=None, alias="patentNumber")
    petition_issue_considered_text_bag: Optional[List[Dict[str, Any]]] = Field(default=None, alias="petitionIssueConsideredTextBag")
    petition_mail_date: Optional[StrictStr] = Field(default=None, alias="petitionMailDate")
    prosecution_status_code: Optional[StrictStr] = Field(default=None, alias="prosecutionStatusCode")
    prosecution_status_code_description_text: Optional[StrictStr] = Field(default=None, alias="prosecutionStatusCodeDescriptionText")
    rule_bag: Optional[List[StrictStr]] = Field(default=None, alias="ruleBag")
    statute_bag: Optional[List[StrictStr]] = Field(default=None, alias="statuteBag")
    __properties: ClassVar[List[str]] = ["petitionDecisionRecordIdentifier", "applicationNumberText", "businessEntityStatusCategory", "customerNumber", "decisionDate", "decisionPetitionTypeCode", "decisionTypeCode", "decisionPetitionTypeCodeDescriptionText", "finalDecidingOfficeName", "firstApplicantName", "firstInventorToFileIndicator", "groupArtUnitNumber", "technologyCenter", "inventionTitle", "inventorBag", "actionTakenByCourtName", "courtActionIndicator", "lastIngestionDateTime", "patentNumber", "petitionIssueConsideredTextBag", "petitionMailDate", "prosecutionStatusCode", "prosecutionStatusCodeDescriptionText", "ruleBag", "statuteBag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PetitionDecisionAndDocuments from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PetitionDecisionAndDocuments from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "petitionDecisionRecordIdentifier": obj.get("petitionDecisionRecordIdentifier"),
            "applicationNumberText": obj.get("applicationNumberText"),
            "businessEntityStatusCategory": obj.get("businessEntityStatusCategory"),
            "customerNumber": obj.get("customerNumber"),
            "decisionDate": obj.get("decisionDate"),
            "decisionPetitionTypeCode": obj.get("decisionPetitionTypeCode"),
            "decisionTypeCode": obj.get("decisionTypeCode"),
            "decisionPetitionTypeCodeDescriptionText": obj.get("decisionPetitionTypeCodeDescriptionText"),
            "finalDecidingOfficeName": obj.get("finalDecidingOfficeName"),
            "firstApplicantName": obj.get("firstApplicantName"),
            "firstInventorToFileIndicator": obj.get("firstInventorToFileIndicator"),
            "groupArtUnitNumber": obj.get("groupArtUnitNumber"),
            "technologyCenter": obj.get("technologyCenter"),
            "inventionTitle": obj.get("inventionTitle"),
            "inventorBag": obj.get("inventorBag"),
            "actionTakenByCourtName": obj.get("actionTakenByCourtName"),
            "courtActionIndicator": obj.get("courtActionIndicator"),
            "lastIngestionDateTime": obj.get("lastIngestionDateTime"),
            "patentNumber": obj.get("patentNumber"),
            "petitionIssueConsideredTextBag": obj.get("petitionIssueConsideredTextBag"),
            "petitionMailDate": obj.get("petitionMailDate"),
            "prosecutionStatusCode": obj.get("prosecutionStatusCode"),
            "prosecutionStatusCodeDescriptionText": obj.get("prosecutionStatusCodeDescriptionText"),
            "ruleBag": obj.get("ruleBag"),
            "statuteBag": obj.get("statuteBag")
        })
        return _obj


