# coding: utf-8

"""
    Open Data Portal (ODP) API

    The Open Data Portal (ODP) API allows you to extract USPTO data at no cost - with several ways to do it. To learn about the ODP API Rate Limits, please visit to the <a href=\"https://data.uspto.gov/apis/api-rate-limits\" target=\"_blank\">API Rate Limits page</a>. <br><br> <b>Before proceeding</b>, you must have an ODP API key in order to access these Swagger UI resources. Once you have obtained an API key, you can pass the API key into a REST API call in the x-api-key header of the request. For more details and steps to generate an API key visit to the <a href=\"https://data.uspto.gov/apis/getting-started\" target=\"_blank\">Getting Started page</a>.<br><br>For example, the request to access patent data for an application might look like as below.<br><br><code>curl -X \"GET\" \"https://api.uspto.gov/api/v1/patent/applications/14412875\" -H \"X-API-KEY:YOUR_API_KEY\"</code><br><br></br><code>curl -X \"POST\" \"https://api.uspto.gov/api/v1/patent/applications/search\" -H \"X-API-KEY:YOUR_API_KEY\" -d \"{\\\\\"q\\\\\":\\\\\"applicationMetaData.applicationTypeLabelName:Utility\\\\\"}\"</br></code>

    The version of the OpenAPI document: 1.0.0
    Contact: data@uspto.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.application_meta_data_applicant_bag_inner import ApplicationMetaDataApplicantBagInner
from openapi_client.models.application_meta_data_entity_status_data import ApplicationMetaDataEntityStatusData
from openapi_client.models.application_meta_data_inventor_bag_inner import ApplicationMetaDataInventorBagInner
from typing import Optional, Set
from typing_extensions import Self

class ApplicationMetaData(BaseModel):
    """
    Represents patent application meta data properties
    """ # noqa: E501
    national_stage_indicator: Optional[StrictBool] = Field(default=None, description="Indicates whether this application is a national application which entered the national stage from an international PCT application", alias="nationalStageIndicator")
    entity_status_data: Optional[ApplicationMetaDataEntityStatusData] = Field(default=None, alias="entityStatusData")
    publication_date_bag: Optional[List[StrictStr]] = Field(default=None, alias="publicationDateBag")
    publication_sequence_number_bag: Optional[List[StrictStr]] = Field(default=None, alias="publicationSequenceNumberBag")
    publication_category_bag: Optional[List[StrictStr]] = Field(default=None, alias="publicationCategoryBag")
    docket_number: Optional[StrictStr] = Field(default=None, alias="docketNumber")
    first_inventor_to_file_indicator: Optional[StrictStr] = Field(default=None, alias="firstInventorToFileIndicator")
    first_applicant_name: Optional[StrictStr] = Field(default=None, alias="firstApplicantName")
    first_inventor_name: Optional[StrictStr] = Field(default=None, alias="firstInventorName")
    application_confirmation_number: Optional[StrictStr] = Field(default=None, alias="applicationConfirmationNumber")
    application_status_date: Optional[StrictStr] = Field(default=None, alias="applicationStatusDate")
    application_status_description_text: Optional[StrictStr] = Field(default=None, alias="applicationStatusDescriptionText")
    filing_date: Optional[StrictStr] = Field(default=None, description="The date assigned by the Patent Office that identifies when an application meets certain criteria to qualify as having been filed. Refers to ST.9 INID Code 22.", alias="filingDate")
    effective_filing_date: Optional[StrictStr] = Field(default=None, description="The date according to PTO criteria that the patent case qualified as having been 'filed'.  The effective filing date is the same or later than the Filing Date.  The filing date can be changed due to a subsequent action on an application patent case.", alias="effectiveFilingDate")
    grant_date: Optional[StrictStr] = Field(default=None, alias="grantDate")
    group_art_unit_number: Optional[StrictStr] = Field(default=None, description="GAU Code", alias="groupArtUnitNumber")
    application_type_code: Optional[StrictStr] = Field(default=None, description="Code corresponding to Utility, Plant, Design, or Reissue", alias="applicationTypeCode")
    application_type_label_name: Optional[StrictStr] = Field(default=None, alias="applicationTypeLabelName")
    application_type_category: Optional[StrictStr] = Field(default=None, alias="applicationTypeCategory")
    invention_title: Optional[StrictStr] = Field(default=None, alias="inventionTitle")
    patent_number: Optional[StrictStr] = Field(default=None, alias="patentNumber")
    application_status_code: Optional[StrictInt] = Field(default=None, alias="applicationStatusCode")
    earliest_publication_number: Optional[StrictStr] = Field(default=None, description="Publication number corresponding to the earliest publication", alias="earliestPublicationNumber")
    earliest_publication_date: Optional[StrictStr] = Field(default=None, alias="earliestPublicationDate")
    pct_publication_number: Optional[StrictStr] = Field(default=None, description="The unique identifier assigned to the publication of an international patent application in the PCT Gazette by the International Bureau (IB) of the World Intellectual Property Organization (WIPO).", alias="pctPublicationNumber")
    pct_publication_date: Optional[StrictStr] = Field(default=None, alias="pctPublicationDate")
    international_registration_publication_date: Optional[StrictStr] = Field(default=None, description="The date that the IPR is published by the International Bureau", alias="internationalRegistrationPublicationDate")
    international_registration_number: Optional[StrictStr] = Field(default=None, description="The number assigned by the International Bureau to an international registration upon registering an industrial design, a trademark or other type of IPR in the International Register", alias="internationalRegistrationNumber")
    examiner_name_text: Optional[StrictStr] = Field(default=None, description="Name of patent examiner", alias="examinerNameText")
    var_class: Optional[StrictStr] = Field(default=None, description="The first hierarchical level in the USPC classification schedule", alias="class")
    subclass: Optional[StrictStr] = Field(default=None, description="The second highest hierarchical level  in the USP C classification schedule")
    uspc_symbol_text: Optional[StrictStr] = Field(default=None, description="The first hierarchical level in the USPC classification schedule/ The second highest hierarchical level in the USP C classification schedule", alias="uspcSymbolText")
    customer_number: Optional[StrictInt] = Field(default=None, description="Correspondence address of the application inherited from the customer.", alias="customerNumber")
    cpc_classification_bag: Optional[List[StrictStr]] = Field(default=None, description="Collection of Classifications for CPC", alias="cpcClassificationBag")
    applicant_bag: Optional[List[ApplicationMetaDataApplicantBagInner]] = Field(default=None, alias="applicantBag")
    inventor_bag: Optional[List[ApplicationMetaDataInventorBagInner]] = Field(default=None, alias="inventorBag")
    __properties: ClassVar[List[str]] = ["nationalStageIndicator", "entityStatusData", "publicationDateBag", "publicationSequenceNumberBag", "publicationCategoryBag", "docketNumber", "firstInventorToFileIndicator", "firstApplicantName", "firstInventorName", "applicationConfirmationNumber", "applicationStatusDate", "applicationStatusDescriptionText", "filingDate", "effectiveFilingDate", "grantDate", "groupArtUnitNumber", "applicationTypeCode", "applicationTypeLabelName", "applicationTypeCategory", "inventionTitle", "patentNumber", "applicationStatusCode", "earliestPublicationNumber", "earliestPublicationDate", "pctPublicationNumber", "pctPublicationDate", "internationalRegistrationPublicationDate", "internationalRegistrationNumber", "examinerNameText", "class", "subclass", "uspcSymbolText", "customerNumber", "cpcClassificationBag", "applicantBag", "inventorBag"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationMetaData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of entity_status_data
        if self.entity_status_data:
            _dict['entityStatusData'] = self.entity_status_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in applicant_bag (list)
        _items = []
        if self.applicant_bag:
            for _item_applicant_bag in self.applicant_bag:
                if _item_applicant_bag:
                    _items.append(_item_applicant_bag.to_dict())
            _dict['applicantBag'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inventor_bag (list)
        _items = []
        if self.inventor_bag:
            for _item_inventor_bag in self.inventor_bag:
                if _item_inventor_bag:
                    _items.append(_item_inventor_bag.to_dict())
            _dict['inventorBag'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationMetaData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nationalStageIndicator": obj.get("nationalStageIndicator"),
            "entityStatusData": ApplicationMetaDataEntityStatusData.from_dict(obj["entityStatusData"]) if obj.get("entityStatusData") is not None else None,
            "publicationDateBag": obj.get("publicationDateBag"),
            "publicationSequenceNumberBag": obj.get("publicationSequenceNumberBag"),
            "publicationCategoryBag": obj.get("publicationCategoryBag"),
            "docketNumber": obj.get("docketNumber"),
            "firstInventorToFileIndicator": obj.get("firstInventorToFileIndicator"),
            "firstApplicantName": obj.get("firstApplicantName"),
            "firstInventorName": obj.get("firstInventorName"),
            "applicationConfirmationNumber": obj.get("applicationConfirmationNumber"),
            "applicationStatusDate": obj.get("applicationStatusDate"),
            "applicationStatusDescriptionText": obj.get("applicationStatusDescriptionText"),
            "filingDate": obj.get("filingDate"),
            "effectiveFilingDate": obj.get("effectiveFilingDate"),
            "grantDate": obj.get("grantDate"),
            "groupArtUnitNumber": obj.get("groupArtUnitNumber"),
            "applicationTypeCode": obj.get("applicationTypeCode"),
            "applicationTypeLabelName": obj.get("applicationTypeLabelName"),
            "applicationTypeCategory": obj.get("applicationTypeCategory"),
            "inventionTitle": obj.get("inventionTitle"),
            "patentNumber": obj.get("patentNumber"),
            "applicationStatusCode": obj.get("applicationStatusCode"),
            "earliestPublicationNumber": obj.get("earliestPublicationNumber"),
            "earliestPublicationDate": obj.get("earliestPublicationDate"),
            "pctPublicationNumber": obj.get("pctPublicationNumber"),
            "pctPublicationDate": obj.get("pctPublicationDate"),
            "internationalRegistrationPublicationDate": obj.get("internationalRegistrationPublicationDate"),
            "internationalRegistrationNumber": obj.get("internationalRegistrationNumber"),
            "examinerNameText": obj.get("examinerNameText"),
            "class": obj.get("class"),
            "subclass": obj.get("subclass"),
            "uspcSymbolText": obj.get("uspcSymbolText"),
            "customerNumber": obj.get("customerNumber"),
            "cpcClassificationBag": obj.get("cpcClassificationBag"),
            "applicantBag": [ApplicationMetaDataApplicantBagInner.from_dict(_item) for _item in obj["applicantBag"]] if obj.get("applicantBag") is not None else None,
            "inventorBag": [ApplicationMetaDataInventorBagInner.from_dict(_item) for _item in obj["inventorBag"]] if obj.get("inventorBag") is not None else None
        })
        return _obj


