# coding: utf-8

"""
    Open Data Portal (ODP) API

    The Open Data Portal (ODP) API allows you to extract USPTO data at no cost - with several ways to do it. To learn about the ODP API Rate Limits, please visit to the <a href=\"https://data.uspto.gov/apis/api-rate-limits\" target=\"_blank\">API Rate Limits page</a>. <br><br> <b>Before proceeding</b>, you must have an ODP API key in order to access these Swagger UI resources. Once you have obtained an API key, you can pass the API key into a REST API call in the x-api-key header of the request. For more details and steps to generate an API key visit to the <a href=\"https://data.uspto.gov/apis/getting-started\" target=\"_blank\">Getting Started page</a>.<br><br>For example, the request to access patent data for an application might look like as below.<br><br><code>curl -X \"GET\" \"https://api.uspto.gov/api/v1/patent/applications/14412875\" -H \"X-API-KEY:YOUR_API_KEY\"</code><br><br></br><code>curl -X \"POST\" \"https://api.uspto.gov/api/v1/patent/applications/search\" -H \"X-API-KEY:YOUR_API_KEY\" -d \"{\\\\\"q\\\\\":\\\\\"applicationMetaData.applicationTypeLabelName:Utility\\\\\"}\"</br></code>

    The version of the OpenAPI document: 1.0.0
    Contact: data@uspto.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.petition_decision_download_request import PetitionDecisionDownloadRequest
from openapi_client.models.petition_decision_identifier_response_bag import PetitionDecisionIdentifierResponseBag
from openapi_client.models.petition_decision_response_bag import PetitionDecisionResponseBag
from openapi_client.models.petition_decision_search_request import PetitionDecisionSearchRequest

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class PetitionDecisionSearchApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_v1_petition_decisions_petition_decision_record_identifier_get(
        self,
        petition_decision_record_identifier: Annotated[StrictStr, Field(description="Petition Decision number")],
        include_documents: Annotated[Optional[StrictBool], Field(description="This is a true or false...yes to include petition decision documents in the response and no to omit the petition decision documents from the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PetitionDecisionIdentifierResponseBag:
        """Petition decision application data for a provided application number


        :param petition_decision_record_identifier: Petition Decision number (required)
        :type petition_decision_record_identifier: str
        :param include_documents: This is a true or false...yes to include petition decision documents in the response and no to omit the petition decision documents from the response
        :type include_documents: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_petition_decision_record_identifier_get_serialize(
            petition_decision_record_identifier=petition_decision_record_identifier,
            include_documents=include_documents,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionIdentifierResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_v1_petition_decisions_petition_decision_record_identifier_get_with_http_info(
        self,
        petition_decision_record_identifier: Annotated[StrictStr, Field(description="Petition Decision number")],
        include_documents: Annotated[Optional[StrictBool], Field(description="This is a true or false...yes to include petition decision documents in the response and no to omit the petition decision documents from the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PetitionDecisionIdentifierResponseBag]:
        """Petition decision application data for a provided application number


        :param petition_decision_record_identifier: Petition Decision number (required)
        :type petition_decision_record_identifier: str
        :param include_documents: This is a true or false...yes to include petition decision documents in the response and no to omit the petition decision documents from the response
        :type include_documents: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_petition_decision_record_identifier_get_serialize(
            petition_decision_record_identifier=petition_decision_record_identifier,
            include_documents=include_documents,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionIdentifierResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_v1_petition_decisions_petition_decision_record_identifier_get_without_preload_content(
        self,
        petition_decision_record_identifier: Annotated[StrictStr, Field(description="Petition Decision number")],
        include_documents: Annotated[Optional[StrictBool], Field(description="This is a true or false...yes to include petition decision documents in the response and no to omit the petition decision documents from the response")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Petition decision application data for a provided application number


        :param petition_decision_record_identifier: Petition Decision number (required)
        :type petition_decision_record_identifier: str
        :param include_documents: This is a true or false...yes to include petition decision documents in the response and no to omit the petition decision documents from the response
        :type include_documents: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_petition_decision_record_identifier_get_serialize(
            petition_decision_record_identifier=petition_decision_record_identifier,
            include_documents=include_documents,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionIdentifierResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_v1_petition_decisions_petition_decision_record_identifier_get_serialize(
        self,
        petition_decision_record_identifier,
        include_documents,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if petition_decision_record_identifier is not None:
            _path_params['petitionDecisionRecordIdentifier'] = petition_decision_record_identifier
        # process the query parameters
        if include_documents is not None:
            
            _query_params.append(('includeDocuments', include_documents))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/petition/decisions/{petitionDecisionRecordIdentifier}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_v1_petition_decisions_search_download_get(
        self,
        q: Annotated[Optional[StrictStr], Field(description="A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to be sorted followed by sort order")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Position in the dataset of a particular record")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Limit the number of results returned")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Limits the response by specifying fields from dataset should be included.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="Filter data by supplying filter parameter. Provide field name and its value")] = None,
        range_filters: Annotated[Optional[StrictStr], Field(description="Filter the data by supplying range of values. Applicable for number and date type fields.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Download Format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PetitionDecisionResponseBag:
        """Petition decision application search by supplying query parameters

        Query parameters are optional. When no query parameters supplied, top 25 petition decisions are returned

        :param q: A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").
        :type q: str
        :param sort: field to be sorted followed by sort order
        :type sort: str
        :param offset: Position in the dataset of a particular record
        :type offset: int
        :param limit: Limit the number of results returned
        :type limit: int
        :param fields: Limits the response by specifying fields from dataset should be included.
        :type fields: str
        :param filters: Filter data by supplying filter parameter. Provide field name and its value
        :type filters: str
        :param range_filters: Filter the data by supplying range of values. Applicable for number and date type fields.
        :type range_filters: str
        :param format: Download Format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_download_get_serialize(
            q=q,
            sort=sort,
            offset=offset,
            limit=limit,
            fields=fields,
            filters=filters,
            range_filters=range_filters,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_v1_petition_decisions_search_download_get_with_http_info(
        self,
        q: Annotated[Optional[StrictStr], Field(description="A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to be sorted followed by sort order")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Position in the dataset of a particular record")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Limit the number of results returned")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Limits the response by specifying fields from dataset should be included.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="Filter data by supplying filter parameter. Provide field name and its value")] = None,
        range_filters: Annotated[Optional[StrictStr], Field(description="Filter the data by supplying range of values. Applicable for number and date type fields.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Download Format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PetitionDecisionResponseBag]:
        """Petition decision application search by supplying query parameters

        Query parameters are optional. When no query parameters supplied, top 25 petition decisions are returned

        :param q: A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").
        :type q: str
        :param sort: field to be sorted followed by sort order
        :type sort: str
        :param offset: Position in the dataset of a particular record
        :type offset: int
        :param limit: Limit the number of results returned
        :type limit: int
        :param fields: Limits the response by specifying fields from dataset should be included.
        :type fields: str
        :param filters: Filter data by supplying filter parameter. Provide field name and its value
        :type filters: str
        :param range_filters: Filter the data by supplying range of values. Applicable for number and date type fields.
        :type range_filters: str
        :param format: Download Format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_download_get_serialize(
            q=q,
            sort=sort,
            offset=offset,
            limit=limit,
            fields=fields,
            filters=filters,
            range_filters=range_filters,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_v1_petition_decisions_search_download_get_without_preload_content(
        self,
        q: Annotated[Optional[StrictStr], Field(description="A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to be sorted followed by sort order")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Position in the dataset of a particular record")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Limit the number of results returned")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Limits the response by specifying fields from dataset should be included.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="Filter data by supplying filter parameter. Provide field name and its value")] = None,
        range_filters: Annotated[Optional[StrictStr], Field(description="Filter the data by supplying range of values. Applicable for number and date type fields.")] = None,
        format: Annotated[Optional[StrictStr], Field(description="Download Format")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Petition decision application search by supplying query parameters

        Query parameters are optional. When no query parameters supplied, top 25 petition decisions are returned

        :param q: A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").
        :type q: str
        :param sort: field to be sorted followed by sort order
        :type sort: str
        :param offset: Position in the dataset of a particular record
        :type offset: int
        :param limit: Limit the number of results returned
        :type limit: int
        :param fields: Limits the response by specifying fields from dataset should be included.
        :type fields: str
        :param filters: Filter data by supplying filter parameter. Provide field name and its value
        :type filters: str
        :param range_filters: Filter the data by supplying range of values. Applicable for number and date type fields.
        :type range_filters: str
        :param format: Download Format
        :type format: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_download_get_serialize(
            q=q,
            sort=sort,
            offset=offset,
            limit=limit,
            fields=fields,
            filters=filters,
            range_filters=range_filters,
            format=format,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_v1_petition_decisions_search_download_get_serialize(
        self,
        q,
        sort,
        offset,
        limit,
        fields,
        filters,
        range_filters,
        format,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if filters is not None:
            
            _query_params.append(('filters', filters))
            
        if range_filters is not None:
            
            _query_params.append(('rangeFilters', range_filters))
            
        if format is not None:
            
            _query_params.append(('format', format))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/petition/decisions/search/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_v1_petition_decisions_search_download_post(
        self,
        petition_decision_download_request: Annotated[Optional[PetitionDecisionDownloadRequest], Field(description="Petition decision data search request json payload. Fields in the request is optional")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PetitionDecisionResponseBag:
        """Download petition decision data by supplying json payload


        :param petition_decision_download_request: Petition decision data search request json payload. Fields in the request is optional
        :type petition_decision_download_request: PetitionDecisionDownloadRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_download_post_serialize(
            petition_decision_download_request=petition_decision_download_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_v1_petition_decisions_search_download_post_with_http_info(
        self,
        petition_decision_download_request: Annotated[Optional[PetitionDecisionDownloadRequest], Field(description="Petition decision data search request json payload. Fields in the request is optional")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PetitionDecisionResponseBag]:
        """Download petition decision data by supplying json payload


        :param petition_decision_download_request: Petition decision data search request json payload. Fields in the request is optional
        :type petition_decision_download_request: PetitionDecisionDownloadRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_download_post_serialize(
            petition_decision_download_request=petition_decision_download_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_v1_petition_decisions_search_download_post_without_preload_content(
        self,
        petition_decision_download_request: Annotated[Optional[PetitionDecisionDownloadRequest], Field(description="Petition decision data search request json payload. Fields in the request is optional")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Download petition decision data by supplying json payload


        :param petition_decision_download_request: Petition decision data search request json payload. Fields in the request is optional
        :type petition_decision_download_request: PetitionDecisionDownloadRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_download_post_serialize(
            petition_decision_download_request=petition_decision_download_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_v1_petition_decisions_search_download_post_serialize(
        self,
        petition_decision_download_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if petition_decision_download_request is not None:
            _body_params = petition_decision_download_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/petition/decisions/search/download',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_v1_petition_decisions_search_get(
        self,
        q: Annotated[Optional[StrictStr], Field(description="A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to be sorted followed by sort order")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Position in the dataset of a particular record")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Limit the number of results returned")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="List of fields names to be faceted upon separated by comma (<b>,</b>)")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Limits the response by specifying fields from dataset should be included.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="Filter data by supplying filter parameter. Provide field name and its value")] = None,
        range_filters: Annotated[Optional[StrictStr], Field(description="Filter the data by supplying range of values. Applicable for number and date type fields.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PetitionDecisionResponseBag:
        """Petition decision application search by supplying query parameters

        Query parameters are optional. When no query parameters supplied, top 25 petition decisions are returned

        :param q: A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").
        :type q: str
        :param sort: field to be sorted followed by sort order
        :type sort: str
        :param offset: Position in the dataset of a particular record
        :type offset: int
        :param limit: Limit the number of results returned
        :type limit: int
        :param facets: List of fields names to be faceted upon separated by comma (<b>,</b>)
        :type facets: str
        :param fields: Limits the response by specifying fields from dataset should be included.
        :type fields: str
        :param filters: Filter data by supplying filter parameter. Provide field name and its value
        :type filters: str
        :param range_filters: Filter the data by supplying range of values. Applicable for number and date type fields.
        :type range_filters: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_get_serialize(
            q=q,
            sort=sort,
            offset=offset,
            limit=limit,
            facets=facets,
            fields=fields,
            filters=filters,
            range_filters=range_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_v1_petition_decisions_search_get_with_http_info(
        self,
        q: Annotated[Optional[StrictStr], Field(description="A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to be sorted followed by sort order")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Position in the dataset of a particular record")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Limit the number of results returned")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="List of fields names to be faceted upon separated by comma (<b>,</b>)")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Limits the response by specifying fields from dataset should be included.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="Filter data by supplying filter parameter. Provide field name and its value")] = None,
        range_filters: Annotated[Optional[StrictStr], Field(description="Filter the data by supplying range of values. Applicable for number and date type fields.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PetitionDecisionResponseBag]:
        """Petition decision application search by supplying query parameters

        Query parameters are optional. When no query parameters supplied, top 25 petition decisions are returned

        :param q: A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").
        :type q: str
        :param sort: field to be sorted followed by sort order
        :type sort: str
        :param offset: Position in the dataset of a particular record
        :type offset: int
        :param limit: Limit the number of results returned
        :type limit: int
        :param facets: List of fields names to be faceted upon separated by comma (<b>,</b>)
        :type facets: str
        :param fields: Limits the response by specifying fields from dataset should be included.
        :type fields: str
        :param filters: Filter data by supplying filter parameter. Provide field name and its value
        :type filters: str
        :param range_filters: Filter the data by supplying range of values. Applicable for number and date type fields.
        :type range_filters: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_get_serialize(
            q=q,
            sort=sort,
            offset=offset,
            limit=limit,
            facets=facets,
            fields=fields,
            filters=filters,
            range_filters=range_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_v1_petition_decisions_search_get_without_preload_content(
        self,
        q: Annotated[Optional[StrictStr], Field(description="A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to be sorted followed by sort order")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Position in the dataset of a particular record")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Limit the number of results returned")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="List of fields names to be faceted upon separated by comma (<b>,</b>)")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Limits the response by specifying fields from dataset should be included.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="Filter data by supplying filter parameter. Provide field name and its value")] = None,
        range_filters: Annotated[Optional[StrictStr], Field(description="Filter the data by supplying range of values. Applicable for number and date type fields.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Petition decision application search by supplying query parameters

        Query parameters are optional. When no query parameters supplied, top 25 petition decisions are returned

        :param q: A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").
        :type q: str
        :param sort: field to be sorted followed by sort order
        :type sort: str
        :param offset: Position in the dataset of a particular record
        :type offset: int
        :param limit: Limit the number of results returned
        :type limit: int
        :param facets: List of fields names to be faceted upon separated by comma (<b>,</b>)
        :type facets: str
        :param fields: Limits the response by specifying fields from dataset should be included.
        :type fields: str
        :param filters: Filter data by supplying filter parameter. Provide field name and its value
        :type filters: str
        :param range_filters: Filter the data by supplying range of values. Applicable for number and date type fields.
        :type range_filters: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_get_serialize(
            q=q,
            sort=sort,
            offset=offset,
            limit=limit,
            facets=facets,
            fields=fields,
            filters=filters,
            range_filters=range_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_v1_petition_decisions_search_get_serialize(
        self,
        q,
        sort,
        offset,
        limit,
        facets,
        fields,
        filters,
        range_filters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if filters is not None:
            
            _query_params.append(('filters', filters))
            
        if range_filters is not None:
            
            _query_params.append(('rangeFilters', range_filters))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/petition/decisions/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_v1_petition_decisions_search_post(
        self,
        petition_decision_search_request: Annotated[Optional[PetitionDecisionSearchRequest], Field(description="Petition Decision data search request json payload. Fields in the request is optional")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> PetitionDecisionResponseBag:
        """Search petition decision applications by supplying json payload


        :param petition_decision_search_request: Petition Decision data search request json payload. Fields in the request is optional
        :type petition_decision_search_request: PetitionDecisionSearchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_post_serialize(
            petition_decision_search_request=petition_decision_search_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_v1_petition_decisions_search_post_with_http_info(
        self,
        petition_decision_search_request: Annotated[Optional[PetitionDecisionSearchRequest], Field(description="Petition Decision data search request json payload. Fields in the request is optional")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[PetitionDecisionResponseBag]:
        """Search petition decision applications by supplying json payload


        :param petition_decision_search_request: Petition Decision data search request json payload. Fields in the request is optional
        :type petition_decision_search_request: PetitionDecisionSearchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_post_serialize(
            petition_decision_search_request=petition_decision_search_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_v1_petition_decisions_search_post_without_preload_content(
        self,
        petition_decision_search_request: Annotated[Optional[PetitionDecisionSearchRequest], Field(description="Petition Decision data search request json payload. Fields in the request is optional")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search petition decision applications by supplying json payload


        :param petition_decision_search_request: Petition Decision data search request json payload. Fields in the request is optional
        :type petition_decision_search_request: PetitionDecisionSearchRequest
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_petition_decisions_search_post_serialize(
            petition_decision_search_request=petition_decision_search_request,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PetitionDecisionResponseBag",
            '400': "Response400",
            '403': "Response403",
            '404': "Response404",
            '500': "Response500",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_v1_petition_decisions_search_post_serialize(
        self,
        petition_decision_search_request,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if petition_decision_search_request is not None:
            _body_params = petition_decision_search_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/v1/petition/decisions/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


