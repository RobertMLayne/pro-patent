# coding: utf-8

"""
    Open Data Portal (ODP) API

    The Open Data Portal (ODP) API allows you to extract USPTO data at no cost - with several ways to do it. To learn about the ODP API Rate Limits, please visit to the <a href=\"https://data.uspto.gov/apis/api-rate-limits\" target=\"_blank\">API Rate Limits page</a>. <br><br> <b>Before proceeding</b>, you must have an ODP API key in order to access these Swagger UI resources. Once you have obtained an API key, you can pass the API key into a REST API call in the x-api-key header of the request. For more details and steps to generate an API key visit to the <a href=\"https://data.uspto.gov/apis/getting-started\" target=\"_blank\">Getting Started page</a>.<br><br>For example, the request to access patent data for an application might look like as below.<br><br><code>curl -X \"GET\" \"https://api.uspto.gov/api/v1/patent/applications/14412875\" -H \"X-API-KEY:YOUR_API_KEY\"</code><br><br></br><code>curl -X \"POST\" \"https://api.uspto.gov/api/v1/patent/applications/search\" -H \"X-API-KEY:YOUR_API_KEY\" -d \"{\\\\\"q\\\\\":\\\\\"applicationMetaData.applicationTypeLabelName:Utility\\\\\"}\"</br></code>

    The version of the OpenAPI document: 1.0.0
    Contact: data@uspto.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.bdss_response_bag import BdssResponseBag
from openapi_client.models.bdss_response_product_bag import BdssResponseProductBag

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class BulkDataSetsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def api_v1_datasets_products_product_identifier_get(
        self,
        product_identifier: Annotated[StrictStr, Field(description="productIdentifier represents product Short name")],
        file_data_from_date: Annotated[Optional[StrictStr], Field(description="fileDataFromDate")] = None,
        file_data_to_date: Annotated[Optional[StrictStr], Field(description="fileDataToDate")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Number of product file records to skip")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of product file records to collect")] = None,
        include_files: Annotated[Optional[StrictStr], Field(description="value true if product files should be included or false if they should be omitted from the response")] = None,
        latest: Annotated[Optional[StrictStr], Field(description="value is true if only the latest product file should be returned for this specific product")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BdssResponseProductBag:
        """Bulk data- find a product by its identifier (shortName)


        :param product_identifier: productIdentifier represents product Short name (required)
        :type product_identifier: str
        :param file_data_from_date: fileDataFromDate
        :type file_data_from_date: str
        :param file_data_to_date: fileDataToDate
        :type file_data_to_date: str
        :param offset: Number of product file records to skip
        :type offset: int
        :param limit: Number of product file records to collect
        :type limit: int
        :param include_files: value true if product files should be included or false if they should be omitted from the response
        :type include_files: str
        :param latest: value is true if only the latest product file should be returned for this specific product
        :type latest: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_datasets_products_product_identifier_get_serialize(
            product_identifier=product_identifier,
            file_data_from_date=file_data_from_date,
            file_data_to_date=file_data_to_date,
            offset=offset,
            limit=limit,
            include_files=include_files,
            latest=latest,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BdssResponseProductBag",
            '400': "ApiV1DatasetsProductsSearchGet400Response",
            '403': "ApiV1PatentApplicationsSearchGet403Response",
            '404': "ApiV1DatasetsProductsSearchGet404Response",
            '500': "ApiV1PatentApplicationsSearchGet500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_v1_datasets_products_product_identifier_get_with_http_info(
        self,
        product_identifier: Annotated[StrictStr, Field(description="productIdentifier represents product Short name")],
        file_data_from_date: Annotated[Optional[StrictStr], Field(description="fileDataFromDate")] = None,
        file_data_to_date: Annotated[Optional[StrictStr], Field(description="fileDataToDate")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Number of product file records to skip")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of product file records to collect")] = None,
        include_files: Annotated[Optional[StrictStr], Field(description="value true if product files should be included or false if they should be omitted from the response")] = None,
        latest: Annotated[Optional[StrictStr], Field(description="value is true if only the latest product file should be returned for this specific product")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BdssResponseProductBag]:
        """Bulk data- find a product by its identifier (shortName)


        :param product_identifier: productIdentifier represents product Short name (required)
        :type product_identifier: str
        :param file_data_from_date: fileDataFromDate
        :type file_data_from_date: str
        :param file_data_to_date: fileDataToDate
        :type file_data_to_date: str
        :param offset: Number of product file records to skip
        :type offset: int
        :param limit: Number of product file records to collect
        :type limit: int
        :param include_files: value true if product files should be included or false if they should be omitted from the response
        :type include_files: str
        :param latest: value is true if only the latest product file should be returned for this specific product
        :type latest: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_datasets_products_product_identifier_get_serialize(
            product_identifier=product_identifier,
            file_data_from_date=file_data_from_date,
            file_data_to_date=file_data_to_date,
            offset=offset,
            limit=limit,
            include_files=include_files,
            latest=latest,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BdssResponseProductBag",
            '400': "ApiV1DatasetsProductsSearchGet400Response",
            '403': "ApiV1PatentApplicationsSearchGet403Response",
            '404': "ApiV1DatasetsProductsSearchGet404Response",
            '500': "ApiV1PatentApplicationsSearchGet500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_v1_datasets_products_product_identifier_get_without_preload_content(
        self,
        product_identifier: Annotated[StrictStr, Field(description="productIdentifier represents product Short name")],
        file_data_from_date: Annotated[Optional[StrictStr], Field(description="fileDataFromDate")] = None,
        file_data_to_date: Annotated[Optional[StrictStr], Field(description="fileDataToDate")] = None,
        offset: Annotated[Optional[StrictInt], Field(description="Number of product file records to skip")] = None,
        limit: Annotated[Optional[StrictInt], Field(description="Number of product file records to collect")] = None,
        include_files: Annotated[Optional[StrictStr], Field(description="value true if product files should be included or false if they should be omitted from the response")] = None,
        latest: Annotated[Optional[StrictStr], Field(description="value is true if only the latest product file should be returned for this specific product")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Bulk data- find a product by its identifier (shortName)


        :param product_identifier: productIdentifier represents product Short name (required)
        :type product_identifier: str
        :param file_data_from_date: fileDataFromDate
        :type file_data_from_date: str
        :param file_data_to_date: fileDataToDate
        :type file_data_to_date: str
        :param offset: Number of product file records to skip
        :type offset: int
        :param limit: Number of product file records to collect
        :type limit: int
        :param include_files: value true if product files should be included or false if they should be omitted from the response
        :type include_files: str
        :param latest: value is true if only the latest product file should be returned for this specific product
        :type latest: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_datasets_products_product_identifier_get_serialize(
            product_identifier=product_identifier,
            file_data_from_date=file_data_from_date,
            file_data_to_date=file_data_to_date,
            offset=offset,
            limit=limit,
            include_files=include_files,
            latest=latest,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BdssResponseProductBag",
            '400': "ApiV1DatasetsProductsSearchGet400Response",
            '403': "ApiV1PatentApplicationsSearchGet403Response",
            '404': "ApiV1DatasetsProductsSearchGet404Response",
            '500': "ApiV1PatentApplicationsSearchGet500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_v1_datasets_products_product_identifier_get_serialize(
        self,
        product_identifier,
        file_data_from_date,
        file_data_to_date,
        offset,
        limit,
        include_files,
        latest,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if product_identifier is not None:
            _path_params['productIdentifier'] = product_identifier
        # process the query parameters
        if file_data_from_date is not None:
            
            _query_params.append(('fileDataFromDate', file_data_from_date))
            
        if file_data_to_date is not None:
            
            _query_params.append(('fileDataToDate', file_data_to_date))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if include_files is not None:
            
            _query_params.append(('includeFiles', include_files))
            
        if latest is not None:
            
            _query_params.append(('latest', latest))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/datasets/products/{productIdentifier}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def api_v1_datasets_products_search_get(
        self,
        q: Annotated[Optional[StrictStr], Field(description="A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to be sorted followed by sort order")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Position in the dataset of a particular record")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Limit the number of results returned")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="List of fields names to be faceted upon separated by comma (<b>,</b>)")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Limits the response by specifying fields from dataset should be included.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="Filter data by supplying filter parameter. Provide field name and its value")] = None,
        range_filters: Annotated[Optional[StrictStr], Field(description="Filter the data by supplying range of values. Applicable for number and date type fields.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> BdssResponseBag:
        """Search bulk datasets products by supplying query parameters

        Query parameters are optional. When no query parameters supplied, top 25 applications are returned

        :param q: A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").
        :type q: str
        :param sort: field to be sorted followed by sort order
        :type sort: str
        :param offset: Position in the dataset of a particular record
        :type offset: int
        :param limit: Limit the number of results returned
        :type limit: int
        :param facets: List of fields names to be faceted upon separated by comma (<b>,</b>)
        :type facets: str
        :param fields: Limits the response by specifying fields from dataset should be included.
        :type fields: str
        :param filters: Filter data by supplying filter parameter. Provide field name and its value
        :type filters: str
        :param range_filters: Filter the data by supplying range of values. Applicable for number and date type fields.
        :type range_filters: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_datasets_products_search_get_serialize(
            q=q,
            sort=sort,
            offset=offset,
            limit=limit,
            facets=facets,
            fields=fields,
            filters=filters,
            range_filters=range_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BdssResponseBag",
            '400': "ApiV1DatasetsProductsSearchGet400Response",
            '403': "ApiV1PatentApplicationsSearchGet403Response",
            '404': "ApiV1DatasetsProductsSearchGet404Response",
            '500': "ApiV1PatentApplicationsSearchGet500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def api_v1_datasets_products_search_get_with_http_info(
        self,
        q: Annotated[Optional[StrictStr], Field(description="A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to be sorted followed by sort order")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Position in the dataset of a particular record")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Limit the number of results returned")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="List of fields names to be faceted upon separated by comma (<b>,</b>)")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Limits the response by specifying fields from dataset should be included.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="Filter data by supplying filter parameter. Provide field name and its value")] = None,
        range_filters: Annotated[Optional[StrictStr], Field(description="Filter the data by supplying range of values. Applicable for number and date type fields.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[BdssResponseBag]:
        """Search bulk datasets products by supplying query parameters

        Query parameters are optional. When no query parameters supplied, top 25 applications are returned

        :param q: A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").
        :type q: str
        :param sort: field to be sorted followed by sort order
        :type sort: str
        :param offset: Position in the dataset of a particular record
        :type offset: int
        :param limit: Limit the number of results returned
        :type limit: int
        :param facets: List of fields names to be faceted upon separated by comma (<b>,</b>)
        :type facets: str
        :param fields: Limits the response by specifying fields from dataset should be included.
        :type fields: str
        :param filters: Filter data by supplying filter parameter. Provide field name and its value
        :type filters: str
        :param range_filters: Filter the data by supplying range of values. Applicable for number and date type fields.
        :type range_filters: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_datasets_products_search_get_serialize(
            q=q,
            sort=sort,
            offset=offset,
            limit=limit,
            facets=facets,
            fields=fields,
            filters=filters,
            range_filters=range_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BdssResponseBag",
            '400': "ApiV1DatasetsProductsSearchGet400Response",
            '403': "ApiV1PatentApplicationsSearchGet403Response",
            '404': "ApiV1DatasetsProductsSearchGet404Response",
            '500': "ApiV1PatentApplicationsSearchGet500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def api_v1_datasets_products_search_get_without_preload_content(
        self,
        q: Annotated[Optional[StrictStr], Field(description="A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").")] = None,
        sort: Annotated[Optional[StrictStr], Field(description="field to be sorted followed by sort order")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Position in the dataset of a particular record")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=1)]], Field(description="Limit the number of results returned")] = None,
        facets: Annotated[Optional[StrictStr], Field(description="List of fields names to be faceted upon separated by comma (<b>,</b>)")] = None,
        fields: Annotated[Optional[StrictStr], Field(description="Limits the response by specifying fields from dataset should be included.")] = None,
        filters: Annotated[Optional[StrictStr], Field(description="Filter data by supplying filter parameter. Provide field name and its value")] = None,
        range_filters: Annotated[Optional[StrictStr], Field(description="Filter the data by supplying range of values. Applicable for number and date type fields.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Search bulk datasets products by supplying query parameters

        Query parameters are optional. When no query parameters supplied, top 25 applications are returned

        :param q: A search query string which accepts boolean operators (AND, OR, NOT), wildcards (*), and exact phrases (\"\").
        :type q: str
        :param sort: field to be sorted followed by sort order
        :type sort: str
        :param offset: Position in the dataset of a particular record
        :type offset: int
        :param limit: Limit the number of results returned
        :type limit: int
        :param facets: List of fields names to be faceted upon separated by comma (<b>,</b>)
        :type facets: str
        :param fields: Limits the response by specifying fields from dataset should be included.
        :type fields: str
        :param filters: Filter data by supplying filter parameter. Provide field name and its value
        :type filters: str
        :param range_filters: Filter the data by supplying range of values. Applicable for number and date type fields.
        :type range_filters: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._api_v1_datasets_products_search_get_serialize(
            q=q,
            sort=sort,
            offset=offset,
            limit=limit,
            facets=facets,
            fields=fields,
            filters=filters,
            range_filters=range_filters,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "BdssResponseBag",
            '400': "ApiV1DatasetsProductsSearchGet400Response",
            '403': "ApiV1PatentApplicationsSearchGet403Response",
            '404': "ApiV1DatasetsProductsSearchGet404Response",
            '500': "ApiV1PatentApplicationsSearchGet500Response",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _api_v1_datasets_products_search_get_serialize(
        self,
        q,
        sort,
        offset,
        limit,
        facets,
        fields,
        filters,
        range_filters,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if q is not None:
            
            _query_params.append(('q', q))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if facets is not None:
            
            _query_params.append(('facets', facets))
            
        if fields is not None:
            
            _query_params.append(('fields', fields))
            
        if filters is not None:
            
            _query_params.append(('filters', filters))
            
        if range_filters is not None:
            
            _query_params.append(('rangeFilters', range_filters))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'ApiKeyAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/v1/datasets/products/search',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


