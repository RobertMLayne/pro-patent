# coding: utf-8

"""
    Open Data Portal (ODP) API

    The Open Data Portal (ODP) API allows you to extract USPTO data at no cost - with several ways to do it. To learn about the ODP API Rate Limits, please visit to the <a href=\"https://data.uspto.gov/apis/api-rate-limits\" target=\"_blank\">API Rate Limits page</a>. <br><br> <b>Before proceeding</b>, you must have an ODP API key in order to access these Swagger UI resources. Once you have obtained an API key, you can pass the API key into a REST API call in the x-api-key header of the request. For more details and steps to generate an API key visit to the <a href=\"https://data.uspto.gov/apis/getting-started\" target=\"_blank\">Getting Started page</a>.<br><br>For example, the request to access patent data for an application might look like as below.<br><br><code>curl -X \"GET\" \"https://api.uspto.gov/api/v1/patent/applications/14412875\" -H \"X-API-KEY:YOUR_API_KEY\"</code><br><br></br><code>curl -X \"POST\" \"https://api.uspto.gov/api/v1/patent/applications/search\" -H \"X-API-KEY:YOUR_API_KEY\" -d \"{\\\\\"q\\\\\":\\\\\"applicationMetaData.applicationTypeLabelName:Utility\\\\\"}\"</br></code>

    The version of the OpenAPI document: 1.0.0
    Contact: data@uspto.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.api_v1_patent_applications_application_number_text_meta_data_get200_response import ApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response

class TestApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response(unittest.TestCase):
    """ApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response:
        """Test ApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response`
        """
        model = ApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response()
        if include_optional:
            return ApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response(
                count = 1,
                patent_file_wrapper_data_bag = [
                    openapi_client.models._api_v1_patent_applications__application_number_text__meta_data_get_200_response_patent_file_wrapper_data_bag_inner._api_v1_patent_applications__applicationNumberText__meta_data_get_200_response_patentFileWrapperDataBag_inner(
                        application_number_text = '14104993', 
                        application_meta_data = openapi_client.models.application_meta_data.ApplicationMetaData(
                            national_stage_indicator = True, 
                            entity_status_data = openapi_client.models.application_meta_data_entity_status_data.ApplicationMetaData_entityStatusData(
                                small_entity_status_indicator = True, 
                                business_entity_status_category = 'Undiscounted', ), 
                            publication_date_bag = [
                                '2014-06-19'
                                ], 
                            publication_sequence_number_bag = [
                                '61006'
                                ], 
                            publication_category_bag = [
                                '["Granted/Issued","Pre-Grant Publications - PGPub"]'
                                ], 
                            docket_number = '12GR10425US01/859063.688', 
                            first_inventor_to_file_indicator = 'Y', 
                            first_applicant_name = 'STMicroelectronics S.A.', 
                            first_inventor_name = 'Pascal Chevalier', 
                            application_confirmation_number = '1061', 
                            application_status_date = '2016-05-18', 
                            application_status_description_text = 'Patented Case', 
                            filing_date = '2012-12-19', 
                            effective_filing_date = '2013-12-12', 
                            grant_date = '2016-06-07', 
                            group_art_unit_number = 'TTAB', 
                            application_type_code = 'UTL', 
                            application_type_label_name = 'Utility', 
                            application_type_category = 'electronics', 
                            invention_title = 'HETEROJUNCTION BIPOLAR TRANSISTOR', 
                            patent_number = '9362380', 
                            application_status_code = 150, 
                            earliest_publication_number = 'US 2014-0167116 A1', 
                            earliest_publication_date = '2014-06-19', 
                            pct_publication_number = 'WO 2009/064413', 
                            pct_publication_date = '2016-12-16', 
                            international_registration_publication_date = '2016-12-16', 
                            international_registration_number = 'DM/091304', 
                            examiner_name_text = 'HUI TSAI JEY', 
                            class = '257', 
                            subclass = '197000', 
                            uspc_symbol_text = '257/197000', 
                            customer_number = 38106, 
                            cpc_classification_bag = ["H01L29/66325","H01L27/0623","H01L29/7378","H01L21/8249","H01L29/737","H01L29/66242"], 
                            applicant_bag = [
                                openapi_client.models.application_meta_data_applicant_bag_inner.ApplicationMetaData_applicantBag_inner(
                                    applicant_name_text = 'John Smith', 
                                    first_name = 'John', 
                                    middle_name = 'P', 
                                    last_name = 'Smith', 
                                    preferred_name = 'John Smith', 
                                    name_prefix = 'Mr.', 
                                    name_suffix = 'Jr.', 
                                    country_code = 'US', 
                                    correspondence_address_bag = [
                                        openapi_client.models.application_meta_data_applicant_bag_inner_correspondence_address_bag_inner.ApplicationMetaData_applicantBag_inner_correspondenceAddressBag_inner(
                                            name_line_one_text = 'STMicroelectronics S.A.', 
                                            name_line_two_text = 'Electronics', 
                                            geographic_region_name = 'MN', 
                                            geographic_region_code = 'Minnesota', 
                                            city_name = 'Montrouge', 
                                            country_code = 'FR', 
                                            country_name = 'FRANCE', 
                                            postal_address_category = 'commercial', )
                                        ], )
                                ], 
                            inventor_bag = [
                                openapi_client.models.application_meta_data_inventor_bag_inner.ApplicationMetaData_inventorBag_inner(
                                    first_name = 'John', 
                                    middle_name = 'K', 
                                    last_name = 'Smith', 
                                    name_prefix = 'Mr.', 
                                    name_suffix = 'Sr.', 
                                    preferred_name = 'John Smith', 
                                    country_code = 'US', 
                                    inventor_name_text = 'Pascal Chevalier', )
                                ], ), )
                    ],
                request_identifier = 0ff4c603-a290-4659-8092-f68b408150c4
            )
        else:
            return ApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response(
        )
        """

    def testApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response(self):
        """Test ApiV1PatentApplicationsApplicationNumberTextMetaDataGet200Response"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
