# coding: utf-8

"""
    Open Data Portal (ODP) API

    The Open Data Portal (ODP) API allows you to extract USPTO data at no cost - with several ways to do it. To learn about the ODP API Rate Limits, please visit to the <a href=\"https://data.uspto.gov/apis/api-rate-limits\" target=\"_blank\">API Rate Limits page</a>. <br><br> <b>Before proceeding</b>, you must have an ODP API key in order to access these Swagger UI resources. Once you have obtained an API key, you can pass the API key into a REST API call in the x-api-key header of the request. For more details and steps to generate an API key visit to the <a href=\"https://data.uspto.gov/apis/getting-started\" target=\"_blank\">Getting Started page</a>.<br><br>For example, the request to access patent data for an application might look like as below.<br><br><code>curl -X \"GET\" \"https://api.uspto.gov/api/v1/patent/applications/14412875\" -H \"X-API-KEY:YOUR_API_KEY\"</code><br><br></br><code>curl -X \"POST\" \"https://api.uspto.gov/api/v1/patent/applications/search\" -H \"X-API-KEY:YOUR_API_KEY\" -d \"{\\\\\"q\\\\\":\\\\\"applicationMetaData.applicationTypeLabelName:Utility\\\\\"}\"</br></code>

    The version of the OpenAPI document: 1.0.0
    Contact: data@uspto.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.petition_decision_response_bag import PetitionDecisionResponseBag

class TestPetitionDecisionResponseBag(unittest.TestCase):
    """PetitionDecisionResponseBag unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PetitionDecisionResponseBag:
        """Test PetitionDecisionResponseBag
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PetitionDecisionResponseBag`
        """
        model = PetitionDecisionResponseBag()
        if include_optional:
            return PetitionDecisionResponseBag(
                count = 1,
                petition_decision_data_bag = [
                    openapi_client.models.petition_decision.PetitionDecision(
                        petition_decision_record_identifier = '5d899d97-2bba-50a9-b01d-d87b38c70c55', 
                        application_number_text = '15569871', 
                        business_entity_status_category = 'Small', 
                        customer_number = 23628, 
                        decision_date = '2024-03-20', 
                        decision_petition_type_code = 551, 
                        decision_type_code = 'C', 
                        decision_petition_type_code_description_text = 'DENIED', 
                        final_deciding_office_name = 'OFFICE OF PETITIONS', 
                        first_applicant_name = 'BIOVERATIV THERAPEUTICS INC.', 
                        first_inventor_to_file_indicator = True, 
                        group_art_unit_number = '1646', 
                        technology_center = '1646', 
                        invention_title = 'RECEPTOR TYROSINE KINASE BIOMARKERS', 
                        inventor_bag = ["David Clarke","Daniel Rolfe"], 
                        action_taken_by_court_name = 'None', 
                        court_action_indicator = False, 
                        last_ingestion_date_time = '2025-04-23T02:47:58', 
                        patent_number = '', 
                        petition_issue_considered_text_bag = ["Review of Technology Center: New ground of rejection in examiner's answer"], 
                        petition_mail_date = '2022-09-12', 
                        prosecution_status_code = '123', 
                        prosecution_status_code_description_text = 'During examination', 
                        rule_bag = ["37 CFR 1.26(a)","37 CFR 1.113"], 
                        statute_bag = ["35 USC 134"], )
                    ],
                facets = [
                    openapi_client.models.petition_decision_facet.PetitionDecisionFacet(
                        technology_center = [
                            openapi_client.models.petition_decision_facet_entity.PetitionDecisionFacetEntity(
                                value = 'Facet Value', 
                                count = 1, )
                            ], 
                        final_deciding_office_name = [
                            openapi_client.models.petition_decision_facet_entity.PetitionDecisionFacetEntity(
                                value = 'Facet Value', 
                                count = 1, )
                            ], 
                        first_inventor_to_file_indicator = [
                            
                            ], 
                        decision_petition_type_code = [
                            
                            ], 
                        decision_type_code_description_text = [
                            
                            ], 
                        prosecution_status_code_description_text = [
                            
                            ], 
                        petition_issue_considered_text_bag = [
                            
                            ], 
                        statute_bag = [
                            
                            ], 
                        rule_bag = [
                            
                            ], 
                        action_taken_by_court_name = [
                            
                            ], 
                        court_action_indicator = [
                            
                            ], 
                        business_entity_status_category = [
                            
                            ], )
                    ]
            )
        else:
            return PetitionDecisionResponseBag(
        )
        """

    def testPetitionDecisionResponseBag(self):
        """Test PetitionDecisionResponseBag"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
