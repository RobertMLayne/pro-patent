# coding: utf-8

"""
    Open Data Portal (ODP) API

    The Open Data Portal (ODP) API allows you to extract USPTO data at no cost - with several ways to do it. To learn about the ODP API Rate Limits, please visit to the <a href=\"https://data.uspto.gov/apis/api-rate-limits\" target=\"_blank\">API Rate Limits page</a>. <br><br> <b>Before proceeding</b>, you must have an ODP API key in order to access these Swagger UI resources. Once you have obtained an API key, you can pass the API key into a REST API call in the x-api-key header of the request. For more details and steps to generate an API key visit to the <a href=\"https://data.uspto.gov/apis/getting-started\" target=\"_blank\">Getting Started page</a>.<br><br>For example, the request to access patent data for an application might look like as below.<br><br><code>curl -X \"GET\" \"https://api.uspto.gov/api/v1/patent/applications/14412875\" -H \"X-API-KEY:YOUR_API_KEY\"</code><br><br></br><code>curl -X \"POST\" \"https://api.uspto.gov/api/v1/patent/applications/search\" -H \"X-API-KEY:YOUR_API_KEY\" -d \"{\\\\\"q\\\\\":\\\\\"applicationMetaData.applicationTypeLabelName:Utility\\\\\"}\"</br></code>

    The version of the OpenAPI document: 1.0.0
    Contact: data@uspto.gov
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.patent_data_response_patent_file_wrapper_data_bag_inner import PatentDataResponsePatentFileWrapperDataBagInner

class TestPatentDataResponsePatentFileWrapperDataBagInner(unittest.TestCase):
    """PatentDataResponsePatentFileWrapperDataBagInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PatentDataResponsePatentFileWrapperDataBagInner:
        """Test PatentDataResponsePatentFileWrapperDataBagInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PatentDataResponsePatentFileWrapperDataBagInner`
        """
        model = PatentDataResponsePatentFileWrapperDataBagInner()
        if include_optional:
            return PatentDataResponsePatentFileWrapperDataBagInner(
                application_number_text = '14104993',
                application_meta_data = openapi_client.models.application_meta_data.ApplicationMetaData(
                    national_stage_indicator = True, 
                    entity_status_data = openapi_client.models.application_meta_data_entity_status_data.ApplicationMetaData_entityStatusData(
                        small_entity_status_indicator = True, 
                        business_entity_status_category = 'Undiscounted', ), 
                    publication_date_bag = [
                        '2014-06-19'
                        ], 
                    publication_sequence_number_bag = [
                        '61006'
                        ], 
                    publication_category_bag = [
                        '["Granted/Issued","Pre-Grant Publications - PGPub"]'
                        ], 
                    docket_number = '12GR10425US01/859063.688', 
                    first_inventor_to_file_indicator = 'Y', 
                    first_applicant_name = 'STMicroelectronics S.A.', 
                    first_inventor_name = 'Pascal Chevalier', 
                    application_confirmation_number = '1061', 
                    application_status_date = '2016-05-18', 
                    application_status_description_text = 'Patented Case', 
                    filing_date = '2012-12-19', 
                    effective_filing_date = '2013-12-12', 
                    grant_date = '2016-06-07', 
                    group_art_unit_number = 'TTAB', 
                    application_type_code = 'UTL', 
                    application_type_label_name = 'Utility', 
                    application_type_category = 'electronics', 
                    invention_title = 'HETEROJUNCTION BIPOLAR TRANSISTOR', 
                    patent_number = '9362380', 
                    application_status_code = 150, 
                    earliest_publication_number = 'US 2014-0167116 A1', 
                    earliest_publication_date = '2014-06-19', 
                    pct_publication_number = 'WO 2009/064413', 
                    pct_publication_date = '2016-12-16', 
                    international_registration_publication_date = '2016-12-16', 
                    international_registration_number = 'DM/091304', 
                    examiner_name_text = 'HUI TSAI JEY', 
                    class = '257', 
                    subclass = '197000', 
                    uspc_symbol_text = '257/197000', 
                    customer_number = 38106, 
                    cpc_classification_bag = ["H01L29/66325","H01L27/0623","H01L29/7378","H01L21/8249","H01L29/737","H01L29/66242"], 
                    applicant_bag = [
                        openapi_client.models.application_meta_data_applicant_bag_inner.ApplicationMetaData_applicantBag_inner(
                            applicant_name_text = 'John Smith', 
                            first_name = 'John', 
                            middle_name = 'P', 
                            last_name = 'Smith', 
                            preferred_name = 'John Smith', 
                            name_prefix = 'Mr.', 
                            name_suffix = 'Jr.', 
                            country_code = 'US', 
                            correspondence_address_bag = [
                                openapi_client.models.application_meta_data_applicant_bag_inner_correspondence_address_bag_inner.ApplicationMetaData_applicantBag_inner_correspondenceAddressBag_inner(
                                    name_line_one_text = 'STMicroelectronics S.A.', 
                                    name_line_two_text = 'Electronics', 
                                    geographic_region_name = 'MN', 
                                    geographic_region_code = 'Minnesota', 
                                    city_name = 'Montrouge', 
                                    country_code = 'FR', 
                                    country_name = 'FRANCE', 
                                    postal_address_category = 'commercial', )
                                ], )
                        ], 
                    inventor_bag = [
                        openapi_client.models.application_meta_data_inventor_bag_inner.ApplicationMetaData_inventorBag_inner(
                            first_name = 'John', 
                            middle_name = 'K', 
                            last_name = 'Smith', 
                            name_prefix = 'Mr.', 
                            name_suffix = 'Sr.', 
                            preferred_name = 'John Smith', 
                            country_code = 'US', 
                            inventor_name_text = 'Pascal Chevalier', )
                        ], ),
                correspondence_address_bag = [
                    openapi_client.models.patent_data_response_patent_file_wrapper_data_bag_inner_correspondence_address_bag_inner.PatentDataResponse_patentFileWrapperDataBag_inner_correspondenceAddressBag_inner(
                        name_line_one_text = 'Seed IP Law Group LLP/ST (EP ORIGINATING)', 
                        name_line_two_text = 'Attn- IP Docket', 
                        address_line_one_text = '701 FIFTH AVENUE, SUITE 5400', 
                        address_line_two_text = 'Suite 501', 
                        geographic_region_name = 'WASHINGTON', 
                        geographic_region_code = 'WA', 
                        postal_code = '98104-7092', 
                        city_name = 'SEATTLE', 
                        country_code = 'US', 
                        country_name = 'USA', 
                        postal_address_category = 'commercial', )
                    ],
                assignment_bag = [
                    openapi_client.models.assignment.Assignment(
                        reel_number = '60620', 
                        frame_number = '769', 
                        reel_and_frame_number = '60620/769', 
                        page_total_quantity = 16, 
                        assignment_document_location_uri = 'https://legacy-assignments.uspto.gov/assignments/assignment-pat-060620-0769.pdf', 
                        assignment_received_date = '2022-07-11', 
                        assignment_recorded_date = '2022-07-11', 
                        assignment_mailed_date = '2022-07-28', 
                        conveyance_text = 'ASSIGNMENT OF ASSIGNORS INTEREST (SEE DOCUMENT FOR DETAILS).', 
                        assignor_bag = [
                            openapi_client.models.assignment_assignor_bag_inner.Assignment_assignorBag_inner(
                                assignor_name = 'STMICROELECTRONICS SA', 
                                execution_date = '2022-06-30', )
                            ], 
                        assignee_bag = [
                            openapi_client.models.assignment_assignee_bag_inner.Assignment_assigneeBag_inner(
                                assignee_name_text = 'STMICROELECTRONICS SA', 
                                assignee_address = openapi_client.models.assignment_assignee_bag_inner_assignee_address.Assignment_assigneeBag_inner_assigneeAddress(
                                    address_line_one_text = 'CHEMIN DU CHAMP-DES-FILLES 39', 
                                    address_line_two_text = '1228 PLAN-LES-OUATES', 
                                    city_name = 'GENEVA', 
                                    geographic_region_name = 'CHX', 
                                    geographic_region_code = '', 
                                    country_name = 'Switzerland', 
                                    postal_code = '20123', ), )
                            ], 
                        correspondence_address_bag = [
                            openapi_client.models.assignment_correspondence_address_bag_inner.Assignment_correspondenceAddressBag_inner(
                                correspondent_name_text = 'STMICROELECTRONICS, INC.', 
                                address_line_one_text = '750 CANYON DRIVE', 
                                address_line_two_text = 'SUITE 300', 
                                address_line_three_text = 'COPPELL, TX 75019', 
                                address_line_four_text = 'Address Line Four', )
                            ], )
                    ],
                record_attorney = openapi_client.models.record_attorney.RecordAttorney(
                    customer_number_correspondence_data = [
                        openapi_client.models.record_attorney_customer_number_correspondence_data_inner.RecordAttorney_customerNumberCorrespondenceData_inner(
                            patron_identifier = 38106, 
                            organization_standard_name = '', 
                            power_of_attorney_address_bag = [
                                openapi_client.models.record_attorney_customer_number_correspondence_data_inner_power_of_attorney_address_bag_inner.RecordAttorney_customerNumberCorrespondenceData_inner_powerOfAttorneyAddressBag_inner(
                                    name_line_one_text = 'Seed IP Law Group LLP/STMicroelectronics', 
                                    address_line_one_text = '701 FIFTH AVENUE, SUITE 5400', 
                                    address_line_two_text = 'Sample Line Two', 
                                    geographic_region_name = 'WASHINGTON', 
                                    geographic_region_code = 'WA', 
                                    postal_code = '98104-7092', 
                                    city_name = 'SEATTLE', 
                                    country_code = 'US', 
                                    country_name = 'UNITED STATES', )
                                ], 
                            telecommunication_address_bag = [
                                openapi_client.models.record_attorney_customer_number_correspondence_data_inner_telecommunication_address_bag_inner.RecordAttorney_customerNumberCorrespondenceData_inner_telecommunicationAddressBag_inner(
                                    telecommunication_number = '206-622-4900', 
                                    extension_number = '409', 
                                    telecom_type_code = 'TEL', )
                                ], )
                        ], 
                    power_of_attorney_bag = [
                        openapi_client.models.record_attorney_power_of_attorney_bag_inner.RecordAttorney_powerOfAttorneyBag_inner(
                            first_name = 'DANIEL', 
                            middle_name = 'D', 
                            last_name = 'O'BRIEN', 
                            name_prefix = 'Dr', 
                            name_suffix = 'Jr.', 
                            preferred_name = '', 
                            country_code = 'US', 
                            registration_number = '65545', 
                            active_indicator = 'ACTIVE', 
                            registered_practitioner_category = 'ATTNY', 
                            attorney_address_bag = [
                                openapi_client.models.record_attorney_power_of_attorney_bag_inner_attorney_address_bag_inner.RecordAttorney_powerOfAttorneyBag_inner_attorneyAddressBag_inner(
                                    name_line_one_text = 'SEED IP LAW  GROUP LLP', 
                                    name_line_two_text = 'STOCKTON', 
                                    address_line_one_text = '701 FIFTH AVENUE', 
                                    address_line_two_text = 'SUITE 5400', 
                                    geographic_region_name = 'WASHINGTON', 
                                    geographic_region_code = 'WA', 
                                    postal_code = '98104', 
                                    city_name = 'SEATTLE', 
                                    country_code = 'US', 
                                    country_name = 'UNITED STATES', )
                                ], )
                        ], 
                    attorney_bag = [
                        openapi_client.models.record_attorney_attorney_bag_inner.RecordAttorney_attorneyBag_inner(
                            first_name = 'DANIEL', 
                            middle_name = 'D', 
                            last_name = 'O'BRIEN', 
                            name_prefix = 'Dr', 
                            name_suffix = 'Jr.', 
                            registration_number = '65545', 
                            active_indicator = 'ACTIVE', 
                            registered_practitioner_category = '', )
                        ], ),
                foreign_priority_bag = [
                    openapi_client.models.foreign_priority.ForeignPriority(
                        ip_office_name = 'FRANCE', 
                        filing_date = '2012-12-19', 
                        application_number_text = '1262321', )
                    ],
                parent_continuity_bag = [
                    openapi_client.models.parent_continuity_data.ParentContinuityData(
                        first_inventor_to_file_indicator = True, 
                        parent_application_status_code = 159, 
                        parent_patent_number = '8968299', 
                        parent_application_status_description_text = 'Patent Expired Due to NonPayment of Maintenance Fees Under 37 CFR 1.362', 
                        parent_application_filing_date = '2012-05-23', 
                        parent_application_number_text = '123123133', 
                        child_application_number_text = '10121016', 
                        claim_parentage_type_code = 'CODE', 
                        claim_parentage_type_code_description_text = 'Claims priority from a provisional application', )
                    ],
                child_continuity_bag = [
                    openapi_client.models.child_continuity_data.ChildContinuityData(
                        child_application_status_code = 150, 
                        parent_application_number_text = '14104993', 
                        child_application_number_text = '14853719', 
                        child_application_status_description_text = 'Patented Case', 
                        child_application_filing_date = '2015-09-14', 
                        first_inventor_to_file_indicator = False, 
                        child_patent_number = '9704967', 
                        claim_parentage_type_code = 'DIV', 
                        claim_parentage_type_code_description_text = 'Claims priority from a provisional application', )
                    ],
                patent_term_adjustment_data = openapi_client.models.patent_term_adjustment.PatentTermAdjustment(
                    a_delay_quantity = 0, 
                    adjustment_total_quantity = 0, 
                    applicant_day_delay_quantity = 28, 
                    b_delay_quantity = 0, 
                    c_delay_quantity = 0, 
                    non_overlapping_day_quantity = 0, 
                    overlapping_day_quantity = 0, 
                    patent_term_adjustment_history_data_bag = [
                        openapi_client.models.patent_term_adjustment_patent_term_adjustment_history_data_bag_inner.PatentTermAdjustment_patentTermAdjustmentHistoryDataBag_inner(
                            event_date = '2016-06-07', 
                            applicant_day_delay_quantity = 4, 
                            event_description_text = 'Patent Issue Date Used in PTA Calculation', 
                            event_sequence_number = 0.5, 
                            ip_office_day_delay_quantity = 0, 
                            originating_event_sequence_number = 0, 
                            pta_pte_code = 'PTA', )
                        ], ),
                event_data_bag = [
                    openapi_client.models.event_data.EventData(
                        event_code = 'ELC_RVW', 
                        event_description_text = 'Electronic Review', 
                        event_date = '2018-10-18', )
                    ],
                pgpub_document_meta_data = openapi_client.models.pg_pub_file_meta_data.PGPubFileMetaData(
                    zip_file_name = 'ipa240801.zip', 
                    product_identifier = 'APPXML', 
                    file_location_uri = 'https://bulkdata.uspto.gov/data/patent/application/redbook/fulltext/2024/ipa240104.zip', 
                    file_create_date_time = '2024-08-09:11:30:00', 
                    xml_file_name = 'ipa240801.xml', ),
                grant_document_meta_data = openapi_client.models.grant_file_meta_data.GrantFileMetaData(
                    zip_file_name = 'ipg240102.zip', 
                    product_identifier = 'PTGRXML', 
                    file_location_uri = 'https://bulkdata.uspto.gov/data/patent/grant/redbook/fulltext/2016/ipg160405.zip', 
                    file_create_date_time = '2024-08-09:11:30:00', 
                    xml_file_name = 'ipg160405.xml', ),
                last_ingestion_date_time = '2024-09-15T21:19:01'
            )
        else:
            return PatentDataResponsePatentFileWrapperDataBagInner(
        )
        """

    def testPatentDataResponsePatentFileWrapperDataBagInner(self):
        """Test PatentDataResponsePatentFileWrapperDataBagInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
